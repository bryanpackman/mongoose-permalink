// Generated by CoffeeScript 1.3.3
var PermalinkError, exports, fr, getBasePermalink, getNextPermalink, isValidPermalink, mongoose, to,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

mongoose = require('mongoose');

fr = 'àáâãäåçèéêëìíîïñðóòôõöøùúûüýÿ';

to = 'aaaaaaceeeeiiiinooooooouuuuyy';

module.exports = exports = function(schema, options) {
  var connection, fields, maxLength, modelName, source, target;
  modelName = options.modelName;
  connection = options.connection || mongoose;
  target = options.target || 'permalink';
  source = options.source || 'name';
  maxLength = options.maxLength || 50;
  fields = {};
  fields[target] = String;
  schema.add(fields);
  return schema.pre('save', function(next) {
    var basePermalink, self;
    if ((this[target] != null) && !this.isNew && !this.isModified(target)) {
      return next();
    } else {
      basePermalink = this[target] || getBasePermalink(this[source], maxLength);
      self = this;
      return getNextPermalink(basePermalink, connection.model(modelName), function(err, nextP) {
        if (err) {
          return next(err);
        } else {
          self[target] = nextP;
          if (!self.isNew) {
            self.increment();
          }
          return next();
        }
      }, target);
    }
  });
};

exports.basePermalink = getBasePermalink = function(name, maxLength) {
  var char, i, _fn, _i, _len, _ref;
  if (maxLength == null) {
    maxLength = 50;
  }
  name = name.replace(/^\s+|\s+$/g, '').toLowerCase();
  _ref = fr.split('');
  _fn = function(i, char) {
    return name = name.replace(new RegExp(char, 'g'), to.charAt(i));
  };
  for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
    char = _ref[i];
    _fn(i, char);
  }
  return name.replace(/[^a-z0-9 -]/g, '').replace(/\s+/g, '-').substr(0, maxLength);
};

exports.nextPermalink = getNextPermalink = function(basePermalink, model, cb, permalinkField) {
  var conditions;
  if (permalinkField == null) {
    permalinkField = 'permalink';
  }
  if (!isValidPermalink(basePermalink)) {
    return cb(new PermalinkError("Invalid Permalink"), null);
  } else {
    conditions = {};
    conditions[permalinkField] = new RegExp('^' + basePermalink + '(-\\d+)?$');
    return model.find(conditions, function(e, r) {
      var item, max, nextPermalink, permRegExp, version, _i, _len;
      if (e != null) {
        return cb(e, null);
      } else {
        nextPermalink = basePermalink;
        max = 0;
        permRegExp = new RegExp('^' + basePermalink + '-(\\d+)$');
        for (_i = 0, _len = r.length; _i < _len; _i++) {
          item = r[_i];
          if (item.permalink === basePermalink && max === 0) {
            nextPermalink = basePermalink + '-1';
          } else {
            version = parseInt(permRegExp.exec(item.permalink)[1]);
            if (version > max) {
              nextPermalink = basePermalink + '-' + (version + 1);
              max = version;
            }
          }
        }
        return cb(null, nextPermalink);
      }
    });
  }
};

exports.isValidPermalink = isValidPermalink = function(str, maxLength) {
  if (maxLength == null) {
    maxLength = 50;
  }
  return str.length > 0 && str.length <= maxLength && str !== '-' && !/[^a-z0-9-]/g.test(str);
};

PermalinkError = (function(_super) {

  __extends(PermalinkError, _super);

  function PermalinkError(message) {
    this.message = message != null ? message : "Permalink Error";
  }

  PermalinkError.prototype.name = "PermalinkError";

  return PermalinkError;

})(Error);

exports.PermalinkError = PermalinkError;
